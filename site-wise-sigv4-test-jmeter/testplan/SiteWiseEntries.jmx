<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="MyTestPlan" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Emulate 10 Devices" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Generate deviceId" enabled="true">
          <stringProp name="CounterConfig.start">2001</stringProp>
          <stringProp name="CounterConfig.end">3001</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">deviceId</stringProp>
          <stringProp name="CounterConfig.format">0000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Repeat 60 times" enabled="true">
          <stringProp name="LoopController.loops">60</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST to AWS IoT SiteWise" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entries&quot;: [&#xd;
        {&#xd;
            &quot;entryId&quot;: &quot;${entryId}&quot;,&#xd;
            &quot;propertyAlias&quot;: &quot;/MyFactory/MyAsset/MyTemperatureProperty${deviceId}&quot;,&#xd;
            &quot;propertyValues&quot;: [&#xd;
                {&#xd;
                    &quot;value&quot;: {&#xd;
                        &quot;integerValue&quot;: ${SensorTemperature}&#xd;
                    },&#xd;
                    &quot;timestamp&quot;: {&#xd;
                        &quot;timeInSeconds&quot;: ${localTime}&#xd;
                    }&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">data.iotsitewise.eu-west-1.amazonaws.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/properties</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.UUID;

// Generate UUID to be used as entryId in body payload
UUID uuid = UUID.randomUUID();
String uuid_str = uuid.toString();
log.info(&quot;entryId&quot; + uuid_str);
vars.put(&quot;entryId&quot;, uuid_str);

// Generate time in seconds to be used as localTime in body payload
LocalDateTime currentTime = LocalDateTime.now(ZoneOffset.UTC);
long localTime = currentTime.toEpochSecond(ZoneOffset.UTC);
String localTime_str = String.valueOf(localTime);
vars.put(&quot;localTime&quot;, localTime_str);
log.info(&quot;localTime&quot; + localTime_str);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random SensorTemperature" enabled="true">
              <stringProp name="maximumValue">45</stringProp>
              <stringProp name="minimumValue">25</stringProp>
              <stringProp name="outputFormat">00</stringProp>
              <boolProp name="perThread">false</boolProp>
              <stringProp name="randomSeed"></stringProp>
              <stringProp name="variableName">SensorTemperature</stringProp>
            </RandomVariableConfig>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.security.MessageDigest;
import java.nio.charset.StandardCharsets;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

String AWS_ACCESS_KEY_ID = System.getenv(&quot;AWS_ACCESS_KEY_ID&quot;);
String AWS_SECRET_ACCESS_KEY = System.getenv(&quot;AWS_SECRET_ACCESS_KEY&quot;);
String AWS_SESSION_TOKEN = System.getenv(&quot;AWS_SESSION_TOKEN&quot;);

// TODO final static?
char[] hexArray = &quot;0123456789abcdef&quot;.toCharArray();

byte[] getSignatureKey(String key, String dateStamp, String regionName, String serviceName) {
        try {
            byte[] kSecret = (&quot;AWS4&quot; + key).getBytes(&quot;UTF-8&quot;);
            byte[] kDate = HmacSHA256(dateStamp, kSecret);
            byte[] kRegion = HmacSHA256(regionName, kDate);
            byte[] kService = HmacSHA256(serviceName, kRegion);
            byte[] kSigning = HmacSHA256(&quot;aws4_request&quot;, kService);
            return kSigning;
        } catch (UnsupportedEncodingException  e) {
             return &quot;ERR&quot;.getBytes();
        }
}

byte[] HmacSHA256(String data, byte[] key) {
        try {
            String algorithm = &quot;HmacSHA256&quot;;
            Mac mac = Mac.getInstance(algorithm);
            try {
                mac.init(new SecretKeySpec(key, algorithm));
                try {
                    return  mac.doFinal(data.getBytes(&quot;UTF-8&quot;));
                } catch (UnsupportedEncodingException e) {
                    log.error(&quot;Something is wrong - UnsupportedEncodingException&quot;);
                    return &quot;ERR&quot;.getBytes();
                }
            } catch(InvalidKeyException e) {
                log.error(&quot;Something is wrong - InvalidKeyException&quot;);
                return &quot;ERR&quot;.getBytes();
            }
        } catch(NoSuchAlgorithmException e) {
            log.error(&quot;Something is wrong -  NoSuchAlgorithmException&quot;);
            return &quot;ERR&quot;.getBytes();
            }
    }
    
String getAmazonDate(LocalDateTime dt) {
       
        String amzDate = String.valueOf(dt.getYear());
        
        amzDate += (dt.getMonthValue() &lt; 10) ? &quot;0&quot; + dt.getMonthValue() : dt.getMonthValue();
        amzDate += (dt.getDayOfMonth() &lt; 10) ? &quot;0&quot; + dt.getDayOfMonth() : dt.getDayOfMonth();
        amzDate += &quot;T&quot;;
        amzDate += (dt.getHour() &lt; 10)   ? &quot;0&quot; + dt.getHour()   : dt.getHour();
        amzDate += (dt.getMinute() &lt; 10) ? &quot;0&quot; + dt.getMinute() : dt.getMinute();
        amzDate += (dt.getSecond() &lt; 10) ? &quot;0&quot; + dt.getSecond() : dt.getSecond();
        amzDate += &quot;Z&quot;;
        
        log.info(&quot;amzDate:&quot; + amzDate);
        return amzDate;
  }

String bytesToHex(byte[] bytes) {
   char[] hexChars = new char[bytes.length * 2];
   for ( int j = 0; j &lt; bytes.length; j++ ) {
       int v = bytes[j] &amp; 0xFF;
       hexChars[j * 2] = hexArray[v &gt;&gt;&gt; 4];
       hexChars[j * 2 + 1] = hexArray[v &amp; 0x0F];
   }
   return new String(hexChars);
}

byte[] getSha256(String text) {
        try {

            MessageDigest digest = MessageDigest.getInstance(&quot;SHA-256&quot;);
            byte[] hash = digest.digest(text.getBytes(StandardCharsets.UTF_8));
            return hash;

        } catch (NoSuchAlgorithmException e) {

            return &quot;ERR&quot;.getBytes();


        }
}


// Get method from sampler
String method = sampler.getMethod();
log.info(&quot;Method: &quot; + method);
String body = method.equalsIgnoreCase(&quot;POST&quot;) ? sampler.getArguments().getArgument(0).getValue() : &quot;&quot;;

log.info(&quot;Body: &quot; + body);
URL url = sampler.getUrl();
// Get host from URL
String host = url.getHost(); 
log.info(&quot;Host: &quot; + host);

String canonicalUri = url.getPath();
log.info(&quot;Path: &quot; + canonicalUri);

String region = &quot;eu-west-1&quot;;
String serviceName = &quot;iotsitewise&quot;;
String canonicalQuerystring = &quot;&quot;;

LocalDateTime currentTime = LocalDateTime.now(ZoneOffset.UTC);
String amzDate = getAmazonDate(currentTime);
String datestamp = amzDate.substring(0, 8);
String canonicalHeaders = &quot;content-type:application/json\n&quot; + &quot;host:&quot; + host + &quot;\n&quot; + &quot;x-amz-date:&quot; + amzDate + &quot;\n&quot; + &quot;x-amz-security-token:&quot; + AWS_SESSION_TOKEN + &quot;\n&quot;;
String signedHeaders = &quot;content-type;host;x-amz-date;x-amz-security-token&quot;;
String payloadHash = bytesToHex(getSha256(body));
log.info(&quot;payloadHash: &quot; + payloadHash);
String canonicalRequest = method + &quot;\n&quot; + canonicalUri + &quot;\n&quot; + canonicalQuerystring + &quot;\n&quot; + canonicalHeaders + &quot;\n&quot; + signedHeaders + &quot;\n&quot; + payloadHash;
log.info(&quot;Canonical request: &quot; + canonicalRequest);

String algorithm = &quot;AWS4-HMAC-SHA256&quot;;
String credentialScope = datestamp + &quot;/&quot; + region + &quot;/&quot; + serviceName + &quot;/aws4_request&quot;;
String stringToSign = algorithm + &quot;\n&quot; + amzDate + &quot;\n&quot; + credentialScope + &quot;\n&quot; + bytesToHex(getSha256(canonicalRequest));
log.info(&quot;String to sign: &quot; + stringToSign);

byte[] signingKey = getSignatureKey(AWS_SECRET_ACCESS_KEY, datestamp, region, serviceName);
String signature = bytesToHex(HmacSHA256(stringToSign, signingKey));
String amzAuth = &quot;AWS4-HMAC-SHA256 Credential=&quot; + AWS_ACCESS_KEY_ID + &quot;/&quot; + credentialScope + &quot;, SignedHeaders=&quot; + signedHeaders + &quot;, Signature=&quot; + signature;
log.info(&quot;/////////&quot;);
log.info(&quot;Authorization: &quot; + amzAuth);
log.info(&quot;amzDate: &quot; + amzDate);
log.info(&quot;amzAuth: &quot; + amzAuth);


vars.put(&quot;amzDate&quot;, amzDate);
vars.put(&quot;amzAuth&quot;, amzAuth);
vars.put(&quot;amzToken&quot;, AWS_SESSION_TOKEN);



</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-amz-date</stringProp>
                  <stringProp name="Header.value">${amzDate}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-amz-security-token</stringProp>
                  <stringProp name="Header.value">${amzToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">${amzAuth}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random SensorHumidity" enabled="false">
              <stringProp name="variableName">SensorHumidity</stringProp>
              <stringProp name="outputFormat">00</stringProp>
              <stringProp name="minimumValue">40</stringProp>
              <stringProp name="maximumValue">99</stringProp>
              <stringProp name="randomSeed"></stringProp>
              <boolProp name="perThread">false</boolProp>
            </RandomVariableConfig>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="1 second delay" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
